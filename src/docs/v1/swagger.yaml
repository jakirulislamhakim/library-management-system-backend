openapi: 3.0.0
info:
  title: Library Management System API
  description: |
    The Library Management System API is a RESTful backend service built to manage books, 
    library members, and their borrowing activities efficiently. It enables CRUD operations
    on books and members, as well as borrowing and returning functionality for library users.
    This system is intended for use by library staff to maintain records and monitor
    borrowing behavior, including overdue returns.
  version: '1.0.0'
  contact:
    name: Jakirul Islam Hakim
    email: jakirulislamhakim@gmail.com
    url: https://www.linkedin.com/in/jakirulislamhakim

servers:
  - url: http://localhost:500/api/v1
    description: Local server

tags:
  - name: Books
    description: Operations related to books

paths:
  /books:
    post:
      operationId: createBook
      summary: Create a new book
      description: |
        This endpoint allows you to add a new book to the library's collection. You need to provide the book's title, author, and publication year.
      tags:
        - Books
      requestBody:
        $ref: '#/components/requestBodies/CreatedBook'
      responses:
        '201':
          $ref: '#/components/responses/CreatedBook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: getAllBooks
      summary: Get all books
      description: |
        This endpoint retrieves a list of all books in the library's collection.
      tags:
        - Books
      responses:
        '200':
          $ref: '#/components/responses/GetAllBooks'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /books/{bookId}:
    get:
      operationId: getBookByBookId
      summary: Get a book by ID
      description: |
        This endpoint retrieves a specific book from the library's collection using its unique identifier.
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/BookId'

      responses:
        '200':
          $ref: '#/components/responses/GetBookByBookId'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      operationId: updateBookByBookId
      summary: Update a book by ID
      description: |
        This endpoint updates the details of a specific book in the library's collection using its unique identifier.
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        $ref: '#/components/requestBodies/UpdatedBook'
      responses:
        '200':
          $ref: '#/components/responses/UpdateBookByBookId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteBookByBookId
      summary: Delete a book by ID
      description: |
        This endpoint deletes a specific book from the library's collection using its unique identifier.
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          $ref: '#/components/responses/DeleteBookByBookId'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

# ALL REUSABLE COMPONENTS
components:
  # ALL SCHEMAS
  schemas:
    # Data Model
    BookBase:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
          example: To Kill a Mockingbird
          minLength: 1
          maxLength: 255
        genre:
          type: string
          description: The genre of the book
          example: Fiction
          minLength: 1
          maxLength: 100
        publishYear:
          type: integer
          description: The year the book was published
          example: 1960
          minimum: 1900
          maximum: 2025
        totalCopies:
          type: integer
          description: The total number of copies available in the library
          example: 5
          minimum: 1
          maximum: 10000
        availableCopies:
          type: integer
          description: The number of copies currently available for borrowing
          example: 5
          minimum: 0
          maximum: 10000
    BookId:
      type: object
      properties:
        bookId:
          type: string
          format: uuid
          nullable: false
          description: The unique identifier for the book
          example: 123e4567-e89b-12d3-a456-426614174000
      required:
        - bookId

    # Response Model
    # book success response model
    CreateBookResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 201
        message:
          type: string
          description: A message providing additional information about the response
          example: Book created successfully
        payload:
          type: object
          description: payload have multiple properties like data, links,
          properties:
            data:
              nullable: true
              allOf:
                - type: object
                  required:
                    - bookId
                    - title
                    - genre
                    - publishYear
                    - totalCopies
                    - availableCopies
                - $ref: '#/components/schemas/BookId'
                - $ref: '#/components/schemas/BookBase'
      required:
        - success
        - statusCode
        - message
        - payload
    GetAllBooksResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 200
        message:
          type: string
          description: A message providing additional information about the response
          example: Books retrieved successfully
        payload:
          type: object
          properties:
            data:
              description: A list of books in the library's collection
              type: array
              items:
                allOf:
                  - type: object
                    required:
                      - bookId
                      - title
                      - genre
                      - publishYear
                      - totalCopies
                      - availableCopies
                  - $ref: '#/components/schemas/BookId'
                  - $ref: '#/components/schemas/BookBase'
      required:
        - success
        - statusCode
        - message
        - payload
    GetBookByBookIdResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 200
        message:
          type: string
          description: A message providing additional information about the response
          example: Book retrieved successfully
        payload:
          type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/BookId'
                - $ref: '#/components/schemas/BookBase'
                - type: object
                  required:
                    - bookId
                    - title
                    - genre
                    - publishYear
                    - totalCopies
                    - availableCopies
      required:
        - success
        - statusCode
        - message
        - payload
    UpdateBookByBookIdResponse:
      allOf:
        - $ref: '#/components/schemas/GetBookByBookIdResponse'
        - type: object
          properties:
            message:
              type: string
              description: A message providing additional information about the response
              example: Book updated successfully
    DeleteBookByBookIdResponse:
      allOf:
        - $ref: '#/components/schemas/GetBookByBookIdResponse'
        - type: object
          properties:
            message:
              type: string
              description: A message providing additional information about the response
              example: Book deleted successfully

    # Error Model
    BadRequestError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 400
        message:
          type: string
          description: A message providing additional information about the error
          example: Validation error
        errorSources:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: The path of the request that caused the error
                default: ''
                example: title
              message:
                type: string
                description: A message describing the error
                default: ''
                example: Title is required
            required:
              - path
              - message
    NotFoundError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 404
        message:
          type: string
          description: A message providing additional information about the error
          example: Book not found
        errorSources:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: The path of the request that caused the error
                default: ''
                example: bookId
              message:
                type: string
                description: A message describing the error
                default: ''
                example: Book not found
            required:
              - path
              - message
      required:
        - success
        - statusCode
        - message
        - errorSources
    ConflictError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 409
        message:
          type: string
          description: A message providing additional information about the error
          example: The user email is already exist
        errorSources:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: The path of the request that caused the error
                default: ''
                example: email
              message:
                type: string
                description: A message describing the error
                default: ''
                example: The user email is already exist
            required:
              - path
              - message
      required:
        - success
        - statusCode
        - message
        - errorSources
    InternalServerError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        statusCode:
          type: integer
          description: The HTTP status code of the response
          example: 500
        message:
          type: string
          description: A message providing additional information about the error
          example: Internal server error
        errorSources:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: The path of the request that caused the error
                default: ''
                example: ''
              message:
                type: string
                description: A message describing the error
                default: ''
                example: 'Internal server error'
            required:
              - path
              - message
      required:
        - success
        - statusCode
        - message
        - errorSources

  # ALL REQUESTBODIES
  requestBodies:
    CreatedBook:
      description: Book object that needs to be added
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BookBase'
              - type: object
                required:
                  - title
                  - genre
                  - publishYear
                  - totalCopies
                  - availableCopies
    UpdatedBook:
      description: Book object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookBase'

  # ALL RESPONSES
  responses:
    # error responses
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

    # success responses
    # book responses
    CreatedBook:
      description: Book created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBookResponse'
    GetAllBooks:
      description: Books retrieved successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetAllBooksResponse'
    GetBookByBookId:
      description: Book retrieved successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetBookByBookIdResponse'
    UpdateBookByBookId:
      description: Book updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateBookByBookIdResponse'
    DeleteBookByBookId:
      description: Book deleted successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteBookByBookIdResponse'

  # ALL REUSABLE PATH & QUERY PARAMETERS
  parameters:
    BookId:
      name: bookId
      in: path
      required: true
      description: The unique identifier of the book
      schema:
        type: string
        format: uuid
